{"version":3,"sources":["BooksAPI.js","ShelfChange.js","ListBooks.js","BookShelf.js","Search.js","App.js","serviceWorker.js","index.js"],"names":["api","token","localStorage","Math","random","toString","substr","headers","Accept","Authorization","getAll","fetch","concat","then","res","json","data","books","update","book","shelf","id","method","Object","objectSpread","Content-Type","body","JSON","stringify","search","query","ShelfChange","_this$props","this","props","updateShelf","currentShelf","react_default","a","createElement","onChange","event","target","value","disabled","Component","Book","bookImage","imageLinks","thumbnail","className","style","width","height","backgroundImage","window","location","pathname","src_ShelfChange","title","author","BookShelf","readBooks","currentlyReading","wantToRead","filter","map","ListBooks","key","Search","state","result","noResult","updateQuery","_this","setState","BooksAPI","length","bookFound","mainBooks","find","mainBook","_this2","_this$state","Link","to","type","placeholder","BooksApp","showSearchPage","showMessage","messageString","fetchBooks","updateBook","response","string","setTimeout","Route","path","render","_ref","history","src_Search","exact","src_BookShelf","React","withRouter","Boolean","hostname","match","ReactDOM","BrowserRouter","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.17e53fab.chunk.js","sourcesContent":["const api = \"https://reactnd-books-api.udacity.com\"\r\n\r\n\r\n// Generate a unique token for storing your bookshelf data on the backend server.\r\nlet token = localStorage.token\r\nif (!token)\r\n  token = localStorage.token = Math.random().toString(36).substr(-8)\r\n\r\nconst headers = {\r\n  'Accept': 'application/json',\r\n  'Authorization': token\r\n}\r\n\r\nexport const get = (bookId) =>\r\n  fetch(`${api}/books/${bookId}`, { headers })\r\n    .then(res => res.json())\r\n    .then(data => data.book)\r\n\r\nexport const getAll = () =>\r\n  fetch(`${api}/books`, { headers })\r\n    .then(res => res.json())\r\n    .then(data => data.books)\r\n\r\nexport const update = (book, shelf) =>\r\n  fetch(`${api}/books/${book.id}`, {\r\n    method: 'PUT',\r\n    headers: {\r\n      ...headers,\r\n      'Content-Type': 'application/json'\r\n    },\r\n    body: JSON.stringify({ shelf })\r\n  }).then(res => res.json())\r\n\r\nexport const search = (query) =>\r\n  fetch(`${api}/search`, {\r\n    method: 'POST',\r\n    headers: {\r\n      ...headers,\r\n      'Content-Type': 'application/json'\r\n    },\r\n    body: JSON.stringify({ query })\r\n  }).then(res => res.json())\r\n    .then(data => data.books)\r\n","/* ShelfChange.js\r\n* This file will hold the functionality to change the shelves, and render\r\n* the dropdown menu for each books\r\n*/\r\nimport React, { Component } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nclass ShelfChange extends Component {\r\n  static propTypes = {\r\n    book: PropTypes.object.isRequired,\r\n    updateShelf: PropTypes.func.isRequired,\r\n    currentShelf: PropTypes.string\r\n  }\r\n\r\n  render() {\r\n    const { book, updateShelf, currentShelf } = this.props\r\n    // if its blank, then it means there is none, set the default values\r\n    let shelf\r\n    if (currentShelf) {\r\n      shelf = currentShelf\r\n    } else {\r\n      shelf = \"none\"\r\n    }\r\n    return (\r\n      <select onChange={(event) => updateShelf(book, event.target.value)} value={shelf}>\r\n        <option disabled>\r\n          Move to...\r\n        </option>\r\n        <option value=\"currentlyReading\">Currently Reading</option>\r\n        <option value=\"wantToRead\">Want to Read</option>\r\n        <option value=\"read\">Read</option>\r\n        <option value=\"none\">None</option>\r\n      </select>\r\n    )\r\n  }\r\n}\r\nexport default ShelfChange\r\n","/*  ListBooks.js\r\n*   This component will render individual books with its template and its options\r\n*/\r\nimport React, { Component } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport ShelfChange from './ShelfChange'\r\n\r\nclass Book extends Component {\r\n  static propTypes = {\r\n    books: PropTypes.object.isRequired,\r\n    currentShelf: PropTypes.string,\r\n    updateShelf: PropTypes.func.isRequired\r\n  }\r\n  // if no image, replace with default\r\n  render() {\r\n    const { books, updateShelf, currentShelf } = this.props\r\n    // placeholder image for thumbnail\r\n    let bookImage = books.imageLinks ?\r\n    books.imageLinks.thumbnail : \"\"\r\n    return (\r\n      <li>\r\n        <div className=\"book\">\r\n          <div className=\"book-top\">\r\n            <div className=\"book-cover\" style={{ width: 128, height: 193, backgroundImage: `url(${bookImage})` }}></div>\r\n              {(currentShelf && currentShelf !== \"none\" && window.location.pathname === \"/search\") &&\r\n                <span className=\"bookmark\">{currentShelf}</span>\r\n              }\r\n            <div className=\"book-shelf-changer\">\r\n              <ShelfChange book={books} updateShelf={updateShelf} currentShelf={currentShelf} />\r\n            </div>\r\n          </div>\r\n          <div className=\"book-title\">{books.title}</div>\r\n          <div className=\"book-authors\">{books.author}</div>\r\n        </div>\r\n      </li>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Book\r\n","/*  BookShelf.js\r\n*   This component will render the book shelf, which will render the individual books\r\n*   via ListBooks.JS\r\n*/\r\nimport React, { Component } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport Book from './ListBooks'\r\n\r\nclass BookShelf extends Component {\r\n  static propTypes = {\r\n    books: PropTypes.array.isRequired,\r\n    updateShelf: PropTypes.func.isRequired\r\n  }\r\n  render() {\r\n    const { books, updateShelf } = this.props\r\n    let readBooks, currentlyReading, wantToRead\r\n    currentlyReading = books.filter((books) => books.shelf === 'currentlyReading' )\r\n    wantToRead = books.filter((books) => books.shelf === 'wantToRead' )\r\n    readBooks = books.filter((books) => books.shelf === 'read' )\r\n    return (\r\n      <div>\r\n        <div className=\"bookshelf\">\r\n          <h2 className=\"bookshelf-title\">Currently Reading</h2>\r\n          <div className=\"bookshelf-books\">\r\n            <ol className=\"books-grid\">\r\n            {currentlyReading.map((books) => (\r\n              <Book books={books} currentShelf=\"currentlyReading\" updateShelf={updateShelf} key={books.id} />\r\n            ))}\r\n            </ol>\r\n          </div>\r\n        </div>\r\n        <div className=\"bookshelf\">\r\n          <h2 className=\"bookshelf-title\">Want to Read</h2>\r\n          <div className=\"bookshelf-books\">\r\n            <ol className=\"books-grid\">\r\n              {wantToRead.map((books) => (\r\n                <Book books={books} currentShelf=\"wantToRead\" updateShelf={updateShelf} key={books.id} />\r\n              ))}\r\n            </ol>\r\n          </div>\r\n        </div>\r\n        <div className=\"bookshelf\">\r\n          <h2 className=\"bookshelf-title\">Read</h2>\r\n          <div className=\"bookshelf-books\">\r\n            <ol className=\"books-grid\">\r\n              {readBooks.map((books) => (\r\n                <Book books={books} currentShelf=\"read\" updateShelf={updateShelf} key={books.id} />\r\n              ))}\r\n            </ol>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\nexport default BookShelf\r\n","/*  Search.js\r\n*   This component will render the search page, as well as the functionality to\r\n*   search for books within the API\r\n*/\r\nimport React, { Component } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { Link } from 'react-router-dom'\r\nimport Book from './ListBooks'\r\nimport * as BooksAPI from './BooksAPI'\r\n\r\nclass Search extends Component {\r\n  static propTypes = {\r\n    updateShelf: PropTypes.func.isRequired,\r\n    mainBooks: PropTypes.object.isRequired\r\n  }\r\n  state = {\r\n    query: '',\r\n    result: [],\r\n//    currentBooks: [],\r\n    noResult: false\r\n  }\r\n  updateQuery = (event) => {\r\n    const query = event.target.value;\r\n    this.setState({ query })\r\n    // check if something entered\r\n      if (query) {\r\n        BooksAPI.search(query).then(books => {\r\n          if (books.length > 0) {\r\n            // search and update the shelves for each book\r\n            this.setState({result: books.map(book => {\r\n              let bookFound = this.props.mainBooks.find(mainBook => mainBook.id === book.id)\r\n              if (bookFound) {\r\n                book.shelf = bookFound.shelf;\r\n              }\r\n              return book\r\n            }), noResult: false })\r\n           } else {\r\n             // clear array\r\n            this.setState({result: [], noResult: true })\r\n           }\r\n        })\r\n      } else {\r\n        // clear array if query is blank\r\n        this.setState({result: []})\r\n      }\r\n  }\r\n  render() {\r\n    const { query, result, noResult } = this.state\r\n/* this.state.query = search term */\r\n    return (\r\n      <div className=\"search-books\">\r\n        <div className=\"search-books-bar\">\r\n          <Link to=\"/\" className=\"close-search\">Close</Link>\r\n          <div className=\"search-books-input-wrapper\">\r\n            <input type=\"text\" placeholder=\"Search by title or author\" value={query} onChange={this.updateQuery} />\r\n          </div>\r\n        </div>\r\n        <div className=\"search-books-results\">\r\n          {result.length > 0 && (\r\n            <div>\r\n              <ol className=\"books-grid\">\r\n                  {result.map((books) =>\r\n                    <Book books={books} updateShelf={this.props.updateShelf} currentShelf={books.shelf} key={books.id} />\r\n                  )}\r\n                </ol>\r\n            </div>\r\n            )}\r\n            {noResult &&\r\n              <p className=\"center\">No books found</p>\r\n            }\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Search;\r\n","import React from 'react'\nimport * as BooksAPI from './BooksAPI'\nimport './App.css'\nimport BookShelf from './BookShelf'\nimport Search from './Search'\nimport { Route, Link, withRouter } from 'react-router-dom'\n\nclass BooksApp extends React.Component {\n  state = {\n    books: [],\n    showSearchPage: false,\n    showMessage: false,\n    messageString: \"\"\n  }\n  componentDidMount() {\n    this.fetchBooks();\n  }\n  fetchBooks = () => {\n    BooksAPI.getAll().then((books) => this.setState({books: books}))\n  }\n  // update shelf\n  updateShelf = (updateBook, shelf) => {\n    BooksAPI.update(updateBook, shelf).then(response => {\n    // put the book in the shelf locally\n    updateBook.shelf = shelf\n    this.setState(state => ({\n        books: state.books\n          .filter(book => book.id !== updateBook.id)\n          .concat([updateBook])\n      }));\n    // message handling\n    if (shelf === 'none') {\n      this.showMessage(`${updateBook.title} has been removed from the shelves!`)\n    } else {\n      this.showMessage(`${updateBook.title} has been moved to ${shelf}!`)\n    }\n    })\n  }\n  // see https://stackoverflow.com/a/42734261/2442104\n  showMessage = (string) => {\n    this.setState({showMessage: true, messageString: `${string}`})\n    setTimeout(() => {\n      this.setState({\n        showMessage: false\n      });\n    }, 3000);\n  }\n  render() {\n    return (\n      <div className=\"app\">\n        <div className={`message-success ${this.state.showMessage ? 'show' : 'hidden'}`}>\n          {this.state.messageString}\n        </div>\n        <Route path=\"/search\" render={({ history }) => (\n          <Search updateShelf={this.updateShelf} mainBooks={this.state.books}/>\n          )}/>\n          <Route exact path=\"/\" render={() => (\n          <div className=\"list-books\">\n            <div className=\"list-books-title\">\n              <h1>MyReads</h1>\n            </div>\n            <div className=\"list-books-content\">\n                <BookShelf books={this.state.books} updateShelf={this.updateShelf} />\n            </div>\n            <div className=\"open-search\">\n              <Link to=\"/search\">Add a book</Link>\n            </div>\n          </div>\n        )}/>\n      </div>\n    )\n  }\n}\nexport default withRouter(BooksApp)\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom'\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<BrowserRouter><App /></BrowserRouter>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}